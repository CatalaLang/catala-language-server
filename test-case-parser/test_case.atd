(* Type info *)

type typ = [
  | TBool
  | TInt
  | TRat
  | TMoney
  | TDate
  | TDuration
  | TTuple of typ list
  | TStruct of struct_declaration
  | TEnum of enum_declaration
  | TOption of typ
  | TArray of typ
] <ocaml repr="classic">

type enum_declaration = {
  enum_name: string;
  constructors: (string * typ option) list <json repr="object"> <ts repr="map">;
}

type struct_declaration = {
  struct_name: string;
  fields: (string * typ) list <json repr="object"> <ts repr="map">;
}

type scope_def = {
  name: string;
  module_name: string;
  inputs: (string * typ) list <json repr="object"> <ts repr="map">;
  outputs: (string * typ) list <json repr="object"> <ts repr="map">;
  module_deps : string list;
}

(* Runtime values *)

type source_position = {
  filename : string;
  start_line : int;
  start_column : int;
  end_line : int;
  end_column : int;
  ~law_headings : string list;
}

type date = {
  year : int;
  month : int;
  day : int;
}

type duration = {
  years : int;
  months : int;
  days : int;
}

type runtime_value_raw = [
  | Bool of bool
  | Money of int (* Counted in cents *)
  | Integer of int
  | Decimal of float
  | Date of date
  | Duration of duration
  | Enum of (enum_declaration * (string * runtime_value option))
  | Struct of (struct_declaration * (string * runtime_value) list <json repr="object"> <ts repr="map">)
  | Array of runtime_value list <ocaml repr="array">
] <ocaml repr="classic">

(* to be extended with free-form descriptions, etc. *)
type attr_def = [
  | TestDescription of string
  | Uid of string
  ] <ocaml repr="classic">

type runtime_value = {
  value: runtime_value_raw;
  attrs: attr_def list; (* for UIDs, comments... may be empty *)
}

(* Test data *)

type value_def = {
  value: runtime_value;
  ?pos: source_position option;
}

type test_io = {
  typ: typ;
  ?value: value_def option;
}

type test_inputs = (string * test_io) list <json repr="object"> <ts repr="map">
type test_outputs = (string * test_io) list <json repr="object"> <ts repr="map">

type test = {
  testing_scope: string;
  tested_scope: scope_def;
  test_inputs: test_inputs;
  test_outputs: test_outputs;
  description: string;
}

type test_list = test list

type scope_def_list = scope_def list

(* Message exchange within extension (shell <-> webview) *)

type parse_results = [
  | ParseError of string (* compiler signals a parsing error *)
  | EmptyTestListMismatch (* buffer is non-empty, but empty test list returned *)
  | Results of test_list (* may be empty, that's fine as long as the buffer is empty too *)
]

type test_run_results = [
  | Error of string
  | Ok of test_outputs
]

type test_generate_results = [
  | Error of string
  | Results of test_list
]

type test_run_request = {
  scope: string;
}

type test_generate_request = {
  scope_under_test: string;
  filename: string;
}

type file_selection = {
  filename: string;
  available_scopes: scope_def_list;
}

type up_message = [
  | Ready
  | GuiEdit of test_list
  | OpenInTextEditor
  | TestRunRequest of test_run_request
  | TestGenerateRequest of test_generate_request
  | SelectFileForNewTest
  | CancelSourceUpdate
]

type down_message = [
  | Update of parse_results
  | TestRunResults of test_run_results
  | FileSelectedForNewTest of file_selection
]
