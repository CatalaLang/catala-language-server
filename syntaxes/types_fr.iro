# This file is part of the Catala compiler, a specification language for tax and social benefits
# computation rules. Copyright (C) 2024 Inria, contributor: Vincent Botbol
# <vincent.botbol@inria.fr>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.


name                   = catala_type_fr

################################################################
## Styles
################################################################

styles [] {

.cc_id : style {
   color                 = light_blue
   textmate_scope        = storage.type
}

.primitive : style {
   color                = cyan
   textmate_scope       = support.type
}

.kind : style {
   color                 = orange
   textmate_scope        = keyword.control
}

.punctuation : style {
   color     = red_2
   textmate_scope        = punctuation
}

.literal_numeric : style {
   color = violet
   textmate_scope        = constant.numeric
}

}

#################################################
## Parse contexts
#################################################

__LOWER_CHARS \= a-zéèàâùîêœç

__UPPER_CHARS \= A-ZÉÈÀÂÙÎÊŒÇ

__SC_ID \= [$${__LOWER_CHARS}][$${__LOWER_CHARS}$${__UPPER_CHARS}0-9_\']*

__SC_ID_COMPOSED \= [$${__LOWER_CHARS}][$${__LOWER_CHARS}$${__UPPER_CHARS}0-9_\'\.]*

__CC_ID \= [$${__UPPER_CHARS}][$${__LOWER_CHARS}$${__UPPER_CHARS}0-9_\']*

contexts [] {

##############################################
## Main Context - Entry point context
##############################################

main : context {

  : pattern {
   regex \= (<struct>|<énum>|<défaut>|<option>|<closure_env>)
   styles [] = .kind;
  }

  : pattern {
    regex \= \b(unit|entier|booléen|date|durée|argent|décimal|n\'importe\s+quel|liste\s+de)\b
    styles [] = .primitive;
  }

  : pattern {
     regex \= (\,|\(|\)|→|\.)
     styles [] = .punctuation;
  }

  : pattern {
    regex \= (\|[0-9]+\-[0-9]+\-[0-9]+\|)
    styles [] = .literal_numeric ;
  }

  : pattern {
    regex \= \b($${__CC_ID})\b
    styles [] = .cc_id ;
  }

}

}
